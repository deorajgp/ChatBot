import ChatForm from "../components/ChatForm";

export default function Home() {
  return (
    <main className="min-h-screen bg-white text-black">
      <h1 className="text-3xl font-bold text-center p-6">Code Helper Chatbot</h1>
      <ChatForm />
    </main>
  );
}
page.tsx

"use client";

import { useState } from "react";
import { fetchChatResponse } from "../utils/api";

export default function ChatForm() {
  const [question, setQuestion] = useState("");
  const [answer, setAnswer] = useState("");
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setAnswer("");

    try {
      const result = await fetchChatResponse(question);
      setAnswer(result);
    } catch (error) {
      setAnswer("Error getting response.");
    }

    setLoading(false);
  };

  return (
    <div className="p-6 max-w-2xl mx-auto">
      <form onSubmit={handleSubmit} className="space-y-4">
        <textarea
          rows={4}
          className="w-full border rounded p-2"
          value={question}
          onChange={(e) => setQuestion(e.target.value)}
          placeholder="Enter your coding question here..."
          required
        />
        <button
          type="submit"
          className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
        >
          {loading ? "Thinking..." : "Get Solution"}
        </button>
      </form>

      {answer && (
        <div className="mt-6 bg-gray-100 p-4 rounded whitespace-pre-wrap">
          {answer}
        </div>
      )}
    </div>
  );
}
ChatForm.tsx

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable}`}>
        {children}
      </body>
    </html>
  );
}

layout.tsx


export async function fetchChatResponse(question: string) {
  const res = await fetch("http://localhost:8000/api/v1/chat", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ question }),
  });

  if (!res.ok) throw new Error("Failed to fetch from backend");

  const data = await res.json();
  return data.together;
}

api.ts


